app bhop {
  wasp: {
    version: "^0.11.4"
  },
  title: "bhop",
  client: {
    rootComponent: import { Layout } from "@client/Layout.jsx"
  },
  db: {
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"]
    }
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  }
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/pages/auth/Login.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/pages/auth/Signup.jsx"
}

entity User {=psl
    id       Int     @id @default(autoincrement())
    username String  @unique
    password String
    scores   Score[]
psl=}

entity Score {=psl
    id       Int   @id @default(autoincrement())
    distance Float
    user     User  @relation(fields: [userId], references: [id])
    userId   Int
psl=}

action createScore {
  fn: import { createScore } from "@server/actions.js",
  entities: [Score]
}

action updateScore {
  fn: import { updateScore } from "@server/actions.js",
  entities: [Score]
}

query getUserScores {
  fn: import { getUserScores } from "@server/queries.js",
  entities: [Score]
}

query getTopScores {
  fn: import { getTopScores } from "@server/queries.js",
  entities: [Score]
}

route GameRoute { path: "/", to: GamePage }
page GamePage {
  component: import { Game } from "@client/pages/Game.jsx",
  authRequired: false
}

route ScoresRoute { path: "/scores", to: ScoresPage }
page ScoresPage {
  component: import { Scores } from "@client/pages/Scores.jsx",
  authRequired: true
}